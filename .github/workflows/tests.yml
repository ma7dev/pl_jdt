name: ci

on:
  push:
    branches:
      - main
      - dev/*
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - README.md
  pull_request:
    types:
      - opened
      - reopened
    branches:
      - main
      - dev/*
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - README.md
  schedule:
    - cron:  "0 0 * * *"
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Set up miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: true
          auto-update-conda: true
          python-version: "3.9"
          activate-environment: true
          miniconda-version: 'latest'
      
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Print conda & python path and version
        run : |
          echo "Setting conda init..."
          CONDA_PATH=$(conda info | grep -i 'base environment' | cut -d ":" -f2 | cut -d " " -f2)
          source $CONDA_PATH/etc/profile.d/conda.sh

          echo "Outputting information..."
          which conda
          which python
          python --version
          conda --version
      
      - name: Create environment and install packages
        run: |
          echo "Setting conda init..."
          CONDA_PATH=$(conda info | grep -i 'base environment' | cut -d ":" -f2 | cut -d " " -f2)
          source $CONDA_PATH/etc/profile.d/conda.sh

          echo "Running dev_install script..."
          ./dev_install.sh
      
      - name: Run tests
        run: |
          echo "Setting conda init..."
          CONDA_PATH=$(conda info | grep -i 'base environment' | cut -d ":" -f2 | cut -d " " -f2)
          source $CONDA_PATH/etc/profile.d/conda.sh
          echo "Activating environment..."
          conda activate pl_jdt
          python -m pytest tests
      
      - name: Upload coverage data
        uses: actions/upload-artifact@v2
        with:
          name: coverage-data
          path: ".coverage.*"
          if-no-files-found: ignore
  coverage:
    name: combine_and_check_coverage
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - run: python -m pip install --upgrade coverage[toml]

      - name: Download coverage data.
        uses: actions/download-artifact@v2
        with:
          name: coverage-data

      - name: Combine coverage & fail if it's <100%.
        run: |
          python -m coverage combine
          python -m coverage html --skip-covered --skip-empty
          python -m coverage report --fail-under=100          

      - name: Upload HTML report if check failed.
        uses: actions/upload-artifact@v2
        with:
          name: html-report
          path: htmlcov
        if: ${{ failure() }}